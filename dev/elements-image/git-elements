#! /bin/bash --login

# get the name of the currently running script
script_file=$(basename "${BASH_SOURCE[0]}")

# root folders for elements and workflows
workspace_root=~/datajoint-elements
elements_root=${DJ_ELEMENTS_ROOT:-"${workspace_root}/elements"}
workflows_root=${DJ_WORKFLOWS_ROOT:-"${workspace_root}/workflows"}

# default options
github_user=${GITHUB_USER:-datajoint}
conda_env=${CONDA_ENV_USER:-base}
url_prefix="https://github.com/"
mix_repo_origin=false

# default datajoint repos
git_repos=()
default_git_repos=(
    djarchive-client
    element-data-loader
    element-animal
    element-array-ephys
    element-calcium-imaging
    element-lab
    element-miniscope
    element-session
    workflow-animal
    workflow-array-ephys
    workflow-calcium-imaging
    workflow-miniscope
)

# array for sequence of operations
ops_seq=()

# bash functions
show_help() {
    echo "usage: $script_file [OPTION]...

Clone and install GitHub repositories for DataJoint Elements. If using VSCode, your git
credentials will be copied over to the dev container[1][2]. This script can be
executed after the credentials are setup.

Options:
-------

--help, -h ............... Show this help documentation then exit.
--conda=CONDA_ENV_USER ... Name of conda environment to switch to during install.
--user=GITHUB_USER ....... GitHub username to use instead of default 'datajoint'.
--repos=[LIST] ........... A comma separated list (no spaces) of GitHub repositories.
--mix-origin ............. Download repo from 'datajoint/element*' if '--user' fails.
--ssh .................... Use SSH[2][3] instead of the HTTPS[1] url prefix.

Functions:
---------

uninstall ................ Pip uninstall dev repo and remove egg-info directory.
remove ................... Remove existing element folder if it exists.
clone .................... Clone the elements from list of GitHub repositories.
install .................. Pip install repos in dev mode. Cloned repo should already exist.

Environment Variables:
---------------------

  GITHUB_USER=$GITHUB_USER
  CONDA_ENV_USER=$CONDA_ENV_USER

Examples:
--------

 Get help

   \$ $script_file --help

 Clone repositories using your own fork (e.g., username=iamamutt)

   \$ $script_file --user=iamamutt

 Clone repositories using your own fork and use datajoint if fork doesn't exist

   \$ $script_file --user=iamamutt --mix-origin

 Specify the exact set of repositories to clone (no spaces)

   \$ $script_file --user=iamamutt --mix-origin --repos=element-data-loader,element-session

 Remove existing listed repositories and clone again (no install)

   \$ $script_file --user=iamamutt --repos=element-session remove clone

 Uninstall existing listed repositories using pip uninstall

   \$ $script_file --repos=element-array-ephys,workflow-array-ephys uninstall

List of Default DataJoint Elements:
------------------------------------

$(printf '* %s\n' "${default_git_repos[@]}")

[1] https://docs.github.com/en/get-started/getting-started-with-git/caching-your-github-credentials-in-git
[2] https://code.visualstudio.com/docs/remote/containers#_using-ssh-keys
[3] https://www.ssh.com/academy/ssh/add
"
    exit 0
}

list_conda_pth() {
    conda activate $conda_env
    local conda_pth=$(echo "${CONDA_PREFIX}"/lib/python3*/site-packages/conda.pth)
    if [[ -f "${conda_pth}" ]]; then
        echo "# => conda.pth location: '$conda_pth'"
        echo "# ---- List of packages installed with conda develop ----"
        cat $conda_pth
    else
        echo "#~ Warning: could not find conda.pth at '$conda_pth'"
    fi
}

# remove repo before cloning if it exists
remove_repo() {
    echo "=============================================== Removing: '${repo_path}'"
    if [[ -d "${repo_path}" ]]; then
        rm -rf "${repo_path}"
    fi
}

# clone if directory doesn't exist yet
git_clone() {
    local gh_user="${1:-datajoint}"
    if [[ ! -d "${repo_path}" ]]; then
        echo "=============================================== Cloning: '${repo_path}'"
        git clone ${url_prefix}${gh_user}/${repo_name}.git "${repo_path}" || true
        if $mix_repo_origin &&
            [[ ! -d "${repo_path}" ]] &&
            [[ ! $gh_user == datajoint ]]; then
            echo "# ==> Clone failed. Trying datajoint https fallback url ..."
            gh_user=datajoint
            git clone ${url_prefix}${gh_user}/${repo_name}.git "${repo_path}"
        fi

        # disable push to datajoint repo
        (
            cd "${repo_path}"
            if [[ $gh_user == datajoint ]]; then
                git remote set-url --push origin DISABLED
            else
                # add upstream if cloning fork
                git remote add upstream ${url_prefix}datajoint/${repo_name}.git
                git remote set-url --push upstream DISABLED
                git fetch --all
            fi
        )
    fi
}

# install package using pip install editable
pip_install() {
    if [[ -d "${repo_path}" ]]; then
        (
            echo "=============================================== Install: '${repo_name}'"
            cd "${repo_path}"
            pip install -qqqvvv --no-deps --log=/tmp/pip-elements.log --editable .
        )
    fi
}

# uninstall editable package and remove egg-info
pip_uninstall() {
    echo "=============================================== Uninstall: '${repo_name}'"
    pip uninstall -y ${repo_name}
    if [[ -d "${repo_path}" ]]; then
        (
            cd "${repo_path}"
            set +e
            find . -name '*.egg-info' -type d -print -exec rm -frv {} +
            set -e
        )
    fi
}

# parse input arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
    "help" | "--help" | "-h" | "--help")
        show_help
        ;;
    --conda=*)
        conda_env="${1#*=}"
        echo "'--conda' passed. Using conda environment: '$conda_env'"
        shift
        ;;
    --repos=*)
        git_repos=",${1#*=}"
        git_repos=($(echo $git_repos | awk 'gsub ( ",|:"," " )'))
        echo "'--repos' passed. Using repos: ${git_repos[@]}"
        shift
        ;;
    --user=*)
        github_user="${1#*=}"
        echo "'--user' passed. Using GitHub user: '$github_user'"
        shift
        ;;
    --ssh)
        url_prefix="git@github.com:"
        ssh-keygen -F github.com || ssh-keyscan github.com >>~/.ssh/known_hosts
        shift
        ;;
    --mix-origin)
        mix_repo_origin=true
        echo "'--mix-origin' passed. Using GitHub user: 'datajoint' as a fallback."
        shift
        ;;
    "uninstall")
        ops_seq+=("uninstall")
        echo "'uninstall' operation passed and added to current list: ${ops_seq[@]}"
        shift
        ;;
    "remove")
        ops_seq+=("remove")
        echo "'remove' operation passed and added to current list: ${ops_seq[@]}"
        shift
        ;;
    "clone")
        ops_seq+=("clone")
        echo "'clone' operation passed and added to current list: ${ops_seq[@]}"
        shift
        ;;
    "install")
        ops_seq+=("install")
        echo "'install' operation passed and added to current list: ${ops_seq[@]}"
        shift
        ;;
    *)
        echo "#! Error: Unknown option: '$1'"
        exit 1
        ;;
    esac
done

# make elements/workflows directories if not already existing
mkdir -vp "$workspace_root" "$elements_root" "$workflows_root"
cd "$workspace_root"

# activate specified python environment, must not fail
set -e
conda activate $conda_env

# use defaults if lists empty
[[ ${#git_repos[@]} -eq 0 ]] && git_repos=${default_git_repos[@]}
[[ ${#ops_seq[@]} -eq 0 ]] && ops_seq=("clone" "install")

# start cloning repositories
for repo_name in ${git_repos[@]}; do
    # set folder based on element or workflow
    if [[ $(echo ${repo_name} | grep '^element-') ]]; then
        sub_dir=$elements_root
    elif [[ $(echo ${repo_name} | grep '^workflow-') ]]; then
        sub_dir=$workflows_root
    else
        sub_dir=$workspace_root
    fi

    repo_path="${sub_dir}/${repo_name}"

    # make sure operations run in a fixed order
    [[ " ${ops_seq[*]} " =~ " remove " ]] && remove_repo
    [[ " ${ops_seq[*]} " =~ " clone " ]] && git_clone "${github_user}"
    [[ " ${ops_seq[*]} " =~ " uninstall " ]] && pip_uninstall
    [[ " ${ops_seq[*]} " =~ " install " ]] && pip_install
done
